import mysql.connector
from mysql.connector import Error
import pandas as pd

db_host = '127.0.0.1'
db_user = 'root'
db_password = '130225' 
db_name = 'tickets'
db_port = 3306         
connection = None  
try:

    connection = mysql.connector.connect(
        host=db_host,
        user=db_user,
        password=db_password,
        database=db_name,
        port=db_port
    )

    if connection.is_connected():
        print(f"K·∫øt n·ªëi t·ªõi database '{db_name}' th√†nh c√¥ng!")

        # --- 2. T·∫°o con tr·ªè v√† truy v·∫•n b·∫£ng 'tickets_combined' ---
        cursor = connection.cursor()
        query = "SELECT * FROM tickets_combined LIMIT 10;"  # L·∫•y 10 d√≤ng ƒë·∫ßu ti√™n
        
        print(f"\nƒêang th·ª±c thi truy v·∫•n: {query}")
        cursor.execute(query)

        # --- 3. L·∫•y v√† in k·∫øt qu·∫£ ---
        records = cursor.fetchall()
        
        print(f"\nT√¨m th·∫•y {cursor.rowcount} d√≤ng t·ª´ b·∫£ng 'tickets_combined':")
        for row in records:
            print(row)

except Error as e:
    # In ra l·ªói c·ª• th·ªÉ ƒë·ªÉ d·ªÖ d√†ng ch·∫©n ƒëo√°n
    print(f"\nL·ªói khi th·ª±c thi: {e}")

finally:
    # --- 4. ƒê√≥ng k·∫øt n·ªëi ---
    if connection and connection.is_connected():
        cursor.close()
        connection.close()
        print("\nƒê√£ ƒë√≥ng k·∫øt n·ªëi MySQL.")
        
# topsis_dashboard.py

# --- 1. IMPORT C√ÅC TH∆Ø VI·ªÜN C·∫¶N THI·∫æT ---
import streamlit as st
import pandas as pd
import numpy as np
import yfinance as yf # Th∆∞ vi·ªán ƒë·ªÉ l·∫•y d·ªØ li·ªáu ch·ª©ng kho√°n
import plotly.express as px

# --- C·∫§U H√åNH TRANG WEB ---
st.set_page_config(
    page_title="TOPSIS - Ph√¢n t√≠ch R·ªßi ro C·ªï phi·∫øu",
    page_icon="‚öñÔ∏è",
    layout="wide"
)

# --- 2. C√ÅC H√ÄM X·ª¨ L√ù L√ïI (T∆Ø∆†NG T·ª∞ MODEL DEFINITION) ---

# S·ª≠ d·ª•ng cache ƒë·ªÉ kh√¥ng ph·∫£i t·∫£i l·∫°i d·ªØ li·ªáu m·ªói khi thay ƒë·ªïi widget
@st.cache_data
def get_stock_data(tickers_list):
    """
    H√†m l·∫•y c√°c ch·ªâ s·ªë t√†i ch√≠nh quan tr·ªçng cho vi·ªác ph√¢n t√≠ch r·ªßi ro t·ª´ Yahoo Finance.
    """
    financial_data = []
    for ticker_symbol in tickers_list:
        try:
            ticker = yf.Ticker(ticker_symbol)
            info = ticker.info
            
            # L·∫•y c√°c ch·ªâ s·ªë, n·∫øu kh√¥ng c√≥ th√¨ tr·∫£ v·ªÅ None ƒë·ªÉ x·ª≠ l√Ω sau
            data = {
                'M√£ CP': ticker_symbol,
                'Beta': info.get('beta'),
                'P/E': info.get('trailingPE'),
                'N·ª£/V·ªën CSH': info.get('debtToEquity'),
                'ROE': info.get('returnOnEquity'),
                'Bi√™n LN': info.get('profitMargins')
            }
            financial_data.append(data)
        except Exception as e:
            st.warning(f"Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu cho m√£ '{ticker_symbol}'. L·ªói: {e}")
            
    df = pd.DataFrame(financial_data).set_index('M√£ CP')
    
    # X·ª≠ l√Ω missing values b·∫±ng gi√° tr·ªã trung v·ªã c·ªßa c·ªôt
    for col in df.columns:
        if df[col].isnull().any():
            median_val = df[col].median()
            df[col] = df[col].fillna(median_val)
            
    return df

def run_topsis(decision_matrix, weights, impacts):
    """
    H√†m th·ª±c thi thu·∫≠t to√°n TOPSIS ƒë·ªÉ x·∫øp h·∫°ng c√°c l·ª±a ch·ªçn.
    """
    # B∆∞·ªõc 1: Chu·∫©n h√≥a ma tr·∫≠n quy·∫øt ƒë·ªãnh (Vector Normalization)
    norm_matrix = decision_matrix / np.sqrt((decision_matrix**2).sum(axis=0))
    
    # B∆∞·ªõc 2: T√≠nh to√°n ma tr·∫≠n quy·∫øt ƒë·ªãnh ƒë√£ ƒë∆∞·ª£c chu·∫©n h√≥a v√† c√≥ tr·ªçng s·ªë
    weighted_matrix = norm_matrix * weights
    
    # B∆∞·ªõc 3: X√°c ƒë·ªãnh gi·∫£i ph√°p l√Ω t∆∞·ªüng t·ªët nh·∫•t (A+) v√† t·ªá nh·∫•t (A-)
    ideal_best = np.zeros(weighted_matrix.shape[1])
    ideal_worst = np.zeros(weighted_matrix.shape[1])
    
    for i in range(len(impacts)):
        if impacts[i] == 1: # Ti√™u ch√≠ Benefit (c√†ng cao c√†ng t·ªët)
            ideal_best[i] = weighted_matrix.iloc[:, i].max()
            ideal_worst[i] = weighted_matrix.iloc[:, i].min()
        else: # Ti√™u ch√≠ Cost (c√†ng th·∫•p c√†ng t·ªët)
            ideal_best[i] = weighted_matrix.iloc[:, i].min()
            ideal_worst[i] = weighted_matrix.iloc[:, i].max()
            
    # B∆∞·ªõc 4: T√≠nh kho·∫£ng c√°ch Euclidean ƒë·∫øn gi·∫£i ph√°p l√Ω t∆∞·ªüng
    dist_to_best = np.sqrt(((weighted_matrix - ideal_best)**2).sum(axis=1))
    dist_to_worst = np.sqrt(((weighted_matrix - ideal_worst)**2).sum(axis=1))
    
    # B∆∞·ªõc 5: T√≠nh ƒëi·ªÉm TOPSIS (Performance Score)
    # Th√™m m·ªôt s·ªë r·∫•t nh·ªè (epsilon) v√†o m·∫´u s·ªë ƒë·ªÉ tr√°nh chia cho 0
    epsilon = 1e-6
    topsis_score = dist_to_worst / (dist_to_best + dist_to_worst + epsilon)
    
    return topsis_score

# --- 3. X√ÇY D·ª∞NG GIAO DI·ªÜN NG∆Ø·ªúI D√ôNG (STREAMLIT UI) ---

st.title("‚öñÔ∏è ·ª®ng d·ª•ng Ph√¢n t√≠ch R·ªßi ro ƒê·∫ßu t∆∞ C·ªï phi·∫øu b·∫±ng TOPSIS")
st.info("·ª®ng d·ª•ng n√†y cho ph√©p b·∫°n x·∫øp h·∫°ng r·ªßi ro c·ªßa c√°c c·ªï phi·∫øu d·ª±a tr√™n c√°c ch·ªâ s·ªë t√†i ch√≠nh v√† tr·ªçng s·ªë do b·∫°n t√πy ch·ªânh.")

# --- Sidebar: N∆°i ng∆∞·ªùi d√πng nh·∫≠p li·ªáu v√† c·∫•u h√¨nh ---
with st.sidebar:
    st.header("‚öôÔ∏è B·∫£ng ƒëi·ªÅu khi·ªÉn")
    
    # Nh·∫≠p danh s√°ch c·ªï phi·∫øu
    tickers_input = st.text_area(
        "Nh·∫≠p c√°c m√£ c·ªï phi·∫øu (c√°ch nhau b·ªüi d·∫•u ph·∫©y ho·∫∑c xu·ªëng d√≤ng):",
        "AAPL, MSFT, GOOGL, TSLA, NVDA"
    )
    
    # ƒê·ªãnh nghƒ©a c√°c ti√™u ch√≠ v√† t√°c ƒë·ªông c·ªßa ch√∫ng
    # 1: Benefit (c√†ng cao c√†ng t·ªët), -1: Cost (c√†ng th·∫•p c√†ng t·ªët)
    criteria = {
        'Beta': -1, 'P/E': -1, 'N·ª£/V·ªën CSH': -1,
        'ROE': 1, 'Bi√™n LN': 1
    }
    st.header("‚öñÔ∏è Tr·ªçng s·ªë c√°c Ti√™u ch√≠")
    st.markdown("*T·ªïng c√°c tr·ªçng s·ªë n√™n b·∫±ng 1.0*")
    
    weights = {}
    for crit in criteria:
        weights[crit] = st.slider(f"ƒê·ªô quan tr·ªçng c·ªßa {crit}", 0.0, 1.0, 0.2, 0.05)
    
    total_weight = sum(weights.values())
    if abs(total_weight - 1.0) > 0.01:
        st.warning(f"‚ö†Ô∏è T·ªïng tr·ªçng s·ªë hi·ªán t·∫°i: {total_weight:.2f}. H√£y ƒëi·ªÅu ch·ªânh v·ªÅ 1.0.")
    else:
        st.success(f"‚úÖ T·ªïng tr·ªçng s·ªë: {total_weight:.2f}")

# --- N√∫t b·∫Øt ƒë·∫ßu ph√¢n t√≠ch ---
if st.button("üöÄ B·∫Øt ƒë·∫ßu Ph√¢n t√≠ch", use_container_width=True):
    # X·ª≠ l√Ω input c·ªßa ng∆∞·ªùi d√πng
    tickers_list = [t.strip().upper() for t in tickers_input.replace(',', '\n').split('\n') if t.strip()]
    
    if not tickers_list:
        st.error("Vui l√≤ng nh·∫≠p √≠t nh·∫•t m·ªôt m√£ c·ªï phi·∫øu.")
    else:
        # --- 4. L·∫§Y V√Ä HI·ªÇN TH·ªä D·ªÆ LI·ªÜU (T∆Ø∆†NG T·ª∞ DATA LOADING & EXPLORATION) ---
        with st.spinner(f"ƒêang t·∫£i d·ªØ li·ªáu cho {len(tickers_list)} c·ªï phi·∫øu..."):
            raw_data = get_stock_data(tickers_list)
        
        if not raw_data.empty:
            st.header("üìä D·ªØ li·ªáu T√†i ch√≠nh th√¥")
            st.dataframe(raw_data.style.format("{:.4f}"))
            
            # --- 5. TH·ª∞C THI TOPSIS V√Ä HI·ªÇN TH·ªä K·∫æT QU·∫¢ (T∆Ø∆†NG T·ª∞ EVALUATION) ---
            st.header("üèÜ K·∫øt qu·∫£ X·∫øp h·∫°ng R·ªßi ro")
            
            # Chu·∫©n b·ªã d·ªØ li·ªáu cho h√†m TOPSIS
            decision_matrix = raw_data[list(criteria.keys())]
            weights_list = np.array([weights[crit] for crit in criteria])
            impacts_list = np.array([criteria[crit] for crit in criteria])
            
            # Ch·∫°y thu·∫≠t to√°n
            scores = run_topsis(decision_matrix, weights_list, impacts_list)
            
            # T·∫°o DataFrame k·∫øt qu·∫£
            results_df = raw_data.copy()
            results_df['ƒêi·ªÉm TOPSIS'] = scores
            results_df['X·∫øp h·∫°ng'] = results_df['ƒêi·ªÉm TOPSIS'].rank(ascending=False).astype(int)
            results_df = results_df.sort_values(by='X·∫øp h·∫°ng')
            
            st.success("**Di·ªÖn gi·∫£i:** C·ªï phi·∫øu c√≥ **X·∫øp h·∫°ng 1** v√† **ƒêi·ªÉm TOPSIS cao nh·∫•t** ƒë∆∞·ª£c ƒë√°nh gi√° l√† l·ª±a ch·ªçn **√≠t r·ªßi ro nh·∫•t** d·ª±a tr√™n c√°c ti√™u ch√≠ v√† tr·ªçng s·ªë b·∫°n ƒë√£ ch·ªçn.")
            st.dataframe(results_df.style.format("{:.4f}").background_gradient(cmap='Greens', subset=['ƒêi·ªÉm TOPSIS']))
            
            # --- 6. TR·ª∞C QUAN H√ìA K·∫æT QU·∫¢ (T∆Ø∆†NG T·ª∞ VISUALIZATION) ---
            st.header("üé® Tr·ª±c quan h√≥a K·∫øt qu·∫£")
            fig = px.bar(
                results_df,
                x=results_df.index,
                y='ƒêi·ªÉm TOPSIS',
                color='ƒêi·ªÉm TOPSIS',
                color_continuous_scale='Greens',
                title='So s√°nh ƒêi·ªÉm TOPSIS gi·ªØa c√°c C·ªï phi·∫øu',
                labels={'M√£ CP': 'M√£ C·ªï phi·∫øu', 'ƒêi·ªÉm TOPSIS': 'ƒêi·ªÉm TOPSIS (C√†ng cao c√†ng t·ªët)'}
            )
            fig.update_layout(xaxis={'categoryorder':'total descending'})
            st.plotly_chart(fig, use_container_width=True)


    
        
        
        
